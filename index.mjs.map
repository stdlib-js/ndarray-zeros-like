{"version":3,"file":"index.mjs","sources":["../lib/main.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isndarrayLike = require( '@stdlib/assert-is-ndarray-like' );\nvar isPlainObject = require( '@stdlib/assert-is-plain-object' );\nvar isNonNegativeIntegerArray = require( '@stdlib/assert-is-nonnegative-integer-array' ).primitives;\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar shape2strides = require( '@stdlib/ndarray-base-shape2strides' );\nvar strides2offset = require( '@stdlib/ndarray-base-strides2offset' );\nvar buffer = require( '@stdlib/ndarray-base-buffer' );\nvar numel = require( '@stdlib/ndarray-base-numel' );\nvar ndarray = require( '@stdlib/ndarray-ctor' );\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Creates a zero-filled ndarray having the same shape and data type as a provided ndarray.\n*\n* @param {ndarray} x - input array\n* @param {Options} [options] - function options\n* @param {string} [options.dtype] - output array data type (overrides the input array's inferred data type)\n* @param {string} [options.order] - specifies whether the output array should be 'row-major' (C-style) or 'column-major' (Fortran-style) (overrides the input array's inferred order)\n* @param {(NonNegativeIntegerArray|NonNegativeInteger)} [options.shape] - output array shape (overrides the input array's inferred shape)\n* @throws {TypeError} first argument must have a recognized data type\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} `dtype` option must be a supported ndarray data type\n* @throws {TypeError} `order` option must be a supported order\n* @throws {TypeError} `shape` option must be either a nonnegative integer or an array of nonnegative integers\n* @returns {ndarray} ndarray\n*\n* @example\n* var zeros = require( '@stdlib/ndarray-zeros' );\n*\n* var x = zeros( [ 2, 2 ] );\n* // returns <ndarray>\n*\n* var y = zerosLike( x );\n* // returns <ndarray>\n*\n* var sh = y.shape;\n* // returns [ 2, 2 ]\n*\n* var dt = y.dtype;\n* // returns 'float64'\n*/\nfunction zerosLike( x ) {\n\tvar options;\n\tvar ndims;\n\tvar opts;\n\tvar buf;\n\tvar len;\n\tvar st;\n\n\tif ( !isndarrayLike( x ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an ndarray-like object. Value: `%s`.', x ) );\n\t}\n\topts = {};\n\tif ( arguments.length > 1 ) {\n\t\toptions = arguments[ 1 ];\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\tif ( hasOwnProp( options, 'dtype' ) ) {\n\t\t\topts.dtype = options.dtype;\n\t\t} else {\n\t\t\topts.dtype = x.dtype;\n\t\t}\n\t\tif ( hasOwnProp( options, 'shape' ) ) {\n\t\t\topts.shape = options.shape;\n\t\t\tif ( typeof opts.shape === 'number' ) {\n\t\t\t\topts.shape = [ opts.shape ];\n\t\t\t}\n\t\t\tif ( !isNonNegativeIntegerArray( opts.shape ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must either be a nonnegative integer or an array of nonnegative integers. Option: `%s`.', 'shape', opts.shape ) );\n\t\t\t}\n\t\t} else {\n\t\t\topts.shape = x.shape;\n\t\t}\n\t\tif ( hasOwnProp( options, 'order' ) ) {\n\t\t\topts.order = options.order;\n\t\t} else {\n\t\t\topts.order = x.order;\n\t\t}\n\t} else {\n\t\topts.dtype = x.dtype;\n\t\topts.shape = x.shape;\n\t\topts.order = x.order;\n\t}\n\tndims = opts.shape.length;\n\tif ( ndims > 0 ) {\n\t\tlen = numel( opts.shape );\n\t\tif ( len < 0 ) {\n\t\t\tlen = 0; // note: we should only get here if an inferred shape is invalid (i.e., contains negative dimension sizes)\n\t\t}\n\t\tst = shape2strides( opts.shape, opts.order );\n\t} else {\n\t\t// For 0-dimensional arrays, the buffer should contain a single element...\n\t\tlen = 1;\n\t\tst = [ 0 ];\n\t}\n\tbuf = buffer( opts.dtype, len );\n\tif ( buf === null ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must have a recognized data type. Value: `%s`.', opts.dtype ) );\n\t}\n\treturn new ndarray( opts.dtype, buf, opts.shape, st, strides2offset( opts.shape, st ), opts.order ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nmodule.exports = zerosLike;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create a zero-filled ndarray having the same shape and data type as a provided ndarray.\n*\n* @module @stdlib/ndarray-zeros-like\n*\n* @example\n* var zeros = require( '@stdlib/ndarray-zeros' );\n* var zerosLike = require( '@stdlib/ndarray-zeros-like' );\n*\n* var x = zeros( [ 2, 2 ] );\n* // returns <ndarray>\n*\n* var y = zerosLike( x );\n* // returns <ndarray>\n*\n* var sh = y.shape;\n* // returns [ 2, 2 ]\n*\n* var dt = y.dtype;\n* // returns 'float64'\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],"names":["isndarrayLike","require$$0","isPlainObject","require$$1","isNonNegativeIntegerArray","require$$2","primitives","hasOwnProp","require$$3","shape2strides","require$$4","strides2offset","require$$5","buffer","require$$6","numel","require$$7","ndarray","require$$8","format","require$$9","lib","x","options","opts","buf","len","st","TypeError","arguments","length","dtype","shape","order"],"mappings":";;i4BAsBA,IAAIA,EAAgBC,EAChBC,EAAgBC,EAChBC,EAA4BC,EAAyDC,WACrFC,EAAaC,EACbC,EAAgBC,EAChBC,EAAiBC,EACjBC,EAASC,EACTC,EAAQC,EACRC,EAAUC,EACVC,EAASC,EAoGb,IClFAC,EDiBA,SAAoBC,GACnB,IAAIC,EAEAC,EACAC,EACAC,EACAC,EAEJ,IAAM3B,EAAesB,GACpB,MAAM,IAAIM,UAAWT,EAAQ,gFAAiFG,IAG/G,GADAE,EAAO,GACFK,UAAUC,OAAS,EAAI,CAE3B,IAAM5B,EADNqB,EAAUM,UAAW,IAEpB,MAAM,IAAID,UAAWT,EAAQ,qEAAsEI,IAOpG,GALKhB,EAAYgB,EAAS,SACzBC,EAAKO,MAAQR,EAAQQ,MAErBP,EAAKO,MAAQT,EAAES,MAEXxB,EAAYgB,EAAS,UAKzB,GAJAC,EAAKQ,MAAQT,EAAQS,MACM,iBAAfR,EAAKQ,QAChBR,EAAKQ,MAAQ,CAAER,EAAKQ,SAEf5B,EAA2BoB,EAAKQ,OACrC,MAAM,IAAIJ,UAAWT,EAAQ,sHAAuH,QAASK,EAAKQ,aAGnKR,EAAKQ,MAAQV,EAAEU,MAEXzB,EAAYgB,EAAS,SACzBC,EAAKS,MAAQV,EAAQU,MAErBT,EAAKS,MAAQX,EAAEW,WAGhBT,EAAKO,MAAQT,EAAES,MACfP,EAAKQ,MAAQV,EAAEU,MACfR,EAAKS,MAAQX,EAAEW,MAehB,GAbQT,EAAKQ,MAAMF,OACN,IACZJ,EAAMX,EAAOS,EAAKQ,QACP,IACVN,EAAM,GAEPC,EAAKlB,EAAee,EAAKQ,MAAOR,EAAKS,SAGrCP,EAAM,EACNC,EAAK,CAAE,IAGK,QADbF,EAAMZ,EAAQW,EAAKO,MAAOL,IAEzB,MAAM,IAAIE,UAAWT,EAAQ,kFAAmFK,EAAKO,QAEtH,OAAO,IAAId,EAASO,EAAKO,MAAON,EAAKD,EAAKQ,MAAOL,EAAIhB,EAAgBa,EAAKQ,MAAOL,GAAMH,EAAKS"}