{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isndarrayLike from '@stdlib/assert-is-ndarray-like';\nimport isPlainObject from '@stdlib/assert-is-plain-object';\nimport { primitives as isNonNegativeIntegerArray } from '@stdlib/assert-is-nonnegative-integer-array';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport shape2strides from '@stdlib/ndarray-base-shape2strides';\nimport strides2offset from '@stdlib/ndarray-base-strides2offset';\nimport buffer from '@stdlib/ndarray-base-buffer';\nimport numel from '@stdlib/ndarray-base-numel';\nimport ndarray from '@stdlib/ndarray-ctor';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// MAIN //\n\n/**\n* Creates a zero-filled ndarray having the same shape and data type as a provided ndarray.\n*\n* @param {ndarray} x - input array\n* @param {Options} [options] - function options\n* @param {string} [options.dtype] - output array data type (overrides the input array's inferred data type)\n* @param {string} [options.order] - specifies whether the output array should be 'row-major' (C-style) or 'column-major' (Fortran-style) (overrides the input array's inferred order)\n* @param {(NonNegativeIntegerArray|NonNegativeInteger)} [options.shape] - output array shape (overrides the input array's inferred shape)\n* @param {string} [options.mode=\"throw\"] - specifies how to handle indices which exceed array dimensions\n* @param {StringArray} [options.submode=[\"throw\"]] - specifies how to handle subscripts which exceed array dimensions on a per dimension basis\n* @param {boolean} [options.readonly=false] - boolean indicating whether an array should be read-only\n* @throws {TypeError} first argument must have a recognized data type\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} `dtype` option must be a supported ndarray data type\n* @throws {TypeError} `order` option must be a supported order\n* @throws {TypeError} `shape` option must be either a nonnegative integer or an array of nonnegative integers\n* @throws {TypeError} must provide valid options\n* @returns {ndarray} ndarray\n*\n* @example\n* import zeros from '@stdlib/ndarray-zeros';\n*\n* var x = zeros( [ 2, 2 ] );\n* // returns <ndarray>\n*\n* var y = zerosLike( x );\n* // returns <ndarray>\n*\n* var sh = y.shape;\n* // returns [ 2, 2 ]\n*\n* var dt = y.dtype;\n* // returns 'float64'\n*/\nfunction zerosLike( x ) {\n\tvar options;\n\tvar dtype;\n\tvar order;\n\tvar ndims;\n\tvar opts;\n\tvar buf;\n\tvar len;\n\tvar st;\n\tvar sh;\n\n\tif ( !isndarrayLike( x ) ) {\n\t\tthrow new TypeError( format( '0kH5t,Kg', x ) );\n\t}\n\topts = {};\n\tif ( arguments.length > 1 ) {\n\t\toptions = arguments[ 1 ];\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( format( '0kH2V,FD', options ) );\n\t\t}\n\t\tif ( hasOwnProp( options, 'dtype' ) ) {\n\t\t\tdtype = options.dtype;\n\t\t} else {\n\t\t\tdtype = x.dtype;\n\t\t}\n\t\tif ( hasOwnProp( options, 'shape' ) ) {\n\t\t\tsh = options.shape;\n\t\t\tif ( typeof sh === 'number' ) {\n\t\t\t\tsh = [ sh ];\n\t\t\t}\n\t\t\tif ( !isNonNegativeIntegerArray( sh ) ) {\n\t\t\t\tthrow new TypeError( format( '0kHKh', 'shape', sh ) );\n\t\t\t}\n\t\t} else {\n\t\t\tsh = x.shape;\n\t\t}\n\t\tif ( hasOwnProp( options, 'order' ) ) {\n\t\t\torder = options.order;\n\t\t} else {\n\t\t\torder = x.order;\n\t\t}\n\t\tif ( hasOwnProp( options, 'mode' ) ) {\n\t\t\topts.mode = options.mode;\n\t\t}\n\t\tif ( hasOwnProp( options, 'submode' ) ) {\n\t\t\topts.submode = options.submode;\n\t\t}\n\t\tif ( hasOwnProp( options, 'readonly' ) ) {\n\t\t\topts.readonly = options.readonly;\n\t\t}\n\t} else {\n\t\tdtype = x.dtype;\n\t\tsh = x.shape;\n\t\torder = x.order;\n\t}\n\tndims = sh.length;\n\tif ( ndims > 0 ) {\n\t\tlen = numel( sh );\n\t\tif ( len < 0 ) {\n\t\t\tlen = 0; // note: we should only get here if an inferred shape is invalid (i.e., contains negative dimension sizes)\n\t\t}\n\t\tst = shape2strides( sh, order );\n\t} else {\n\t\t// For 0-dimensional arrays, the buffer should contain a single element...\n\t\tlen = 1;\n\t\tst = [ 0 ];\n\t}\n\tbuf = buffer( dtype, len );\n\tif ( buf === null ) {\n\t\tthrow new TypeError( format( '0kH5L,Kz', dtype ) );\n\t}\n\treturn new ndarray( dtype, buf, sh, st, strides2offset( sh, st ), order, opts ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default zerosLike;\n"],"names":["zerosLike","x","options","dtype","order","opts","buf","len","st","sh","isndarrayLike","TypeError","format","arguments","length","isPlainObject","hasOwnProp","shape","isNonNegativeIntegerArray","mode","submode","readonly","numel","shape2strides","buffer","ndarray","strides2offset"],"mappings":";;u9BAsEA,SAASA,EAAWC,GACnB,IAAIC,EACAC,EACAC,EAEAC,EACAC,EACAC,EACAC,EACAC,EAEJ,IAAMC,EAAeT,GACpB,MAAM,IAAIU,UAAWC,EAAQ,WAAYX,IAG1C,GADAI,EAAO,CAAA,EACFQ,UAAUC,OAAS,EAAI,CAE3B,IAAMC,EADNb,EAAUW,UAAW,IAEpB,MAAM,IAAIF,UAAWC,EAAQ,WAAYV,IAO1C,GAJCC,EADIa,EAAYd,EAAS,SACjBA,EAAQC,MAERF,EAAEE,MAENa,EAAYd,EAAS,UAKzB,GAHmB,iBADnBO,EAAKP,EAAQe,SAEZR,EAAK,CAAEA,KAEFS,EAA2BT,GAChC,MAAM,IAAIE,UAAWC,EAAQ,QAAS,QAASH,SAGhDA,EAAKR,EAAEgB,MAGPb,EADIY,EAAYd,EAAS,SACjBA,EAAQE,MAERH,EAAEG,MAENY,EAAYd,EAAS,UACzBG,EAAKc,KAAOjB,EAAQiB,MAEhBH,EAAYd,EAAS,aACzBG,EAAKe,QAAUlB,EAAQkB,SAEnBJ,EAAYd,EAAS,cACzBG,EAAKgB,SAAWnB,EAAQmB,SAE3B,MACElB,EAAQF,EAAEE,MACVM,EAAKR,EAAEgB,MACPb,EAAQH,EAAEG,MAeX,GAbQK,EAAGK,OACE,IACZP,EAAMe,EAAOb,IACF,IACVF,EAAM,GAEPC,EAAKe,EAAed,EAAIL,KAGxBG,EAAM,EACNC,EAAK,CAAE,IAGK,QADbF,EAAMkB,EAAQrB,EAAOI,IAEpB,MAAM,IAAII,UAAWC,EAAQ,WAAYT,IAE1C,OAAO,IAAIsB,EAAStB,EAAOG,EAAKG,EAAID,EAAIkB,EAAgBjB,EAAID,GAAMJ,EAAOC,EAC1E"}