{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isndarrayLike from '@stdlib/assert-is-ndarray-like' ;\nimport isPlainObject from '@stdlib/assert-is-plain-object' ;\nimport { primitives as isNonNegativeIntegerArray } from '@stdlib/assert-is-nonnegative-integer-array' ;\nimport hasOwnProp from '@stdlib/assert-has-own-property' ;\nimport shape2strides from '@stdlib/ndarray-base-shape2strides' ;\nimport strides2offset from '@stdlib/ndarray-base-strides2offset' ;\nimport buffer from '@stdlib/ndarray-base-buffer' ;\nimport numel from '@stdlib/ndarray-base-numel' ;\nimport ndarray from '@stdlib/ndarray-ctor' ;\nimport format from '@stdlib/error-tools-fmtprodmsg' ;\n\n\n// MAIN //\n\n/**\n* Creates a zero-filled ndarray having the same shape and data type as a provided ndarray.\n*\n* @param {ndarray} x - input array\n* @param {Options} [options] - function options\n* @param {string} [options.dtype] - output array data type (overrides the input array's inferred data type)\n* @param {string} [options.order] - specifies whether the output array should be 'row-major' (C-style) or 'column-major' (Fortran-style) (overrides the input array's inferred order)\n* @param {(NonNegativeIntegerArray|NonNegativeInteger)} [options.shape] - output array shape (overrides the input array's inferred shape)\n* @throws {TypeError} first argument must have a recognized data type\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} `dtype` option must be a supported ndarray data type\n* @throws {TypeError} `order` option must be a supported order\n* @throws {TypeError} `shape` option must be either a nonnegative integer or an array of nonnegative integers\n* @returns {ndarray} ndarray\n*\n* @example\n* import zeros from '@stdlib/ndarray-zeros' ;\n*\n* var x = zeros( [ 2, 2 ] );\n* // returns <ndarray>\n*\n* var y = zerosLike( x );\n* // returns <ndarray>\n*\n* var sh = y.shape;\n* // returns [ 2, 2 ]\n*\n* var dt = y.dtype;\n* // returns 'float64'\n*/\nfunction zerosLike( x ) {\n\tvar options;\n\tvar ndims;\n\tvar opts;\n\tvar buf;\n\tvar len;\n\tvar st;\n\n\tif ( !isndarrayLike( x ) ) {\n\t\tthrow new TypeError( format( '0N367', x ) );\n\t}\n\topts = {};\n\tif ( arguments.length > 1 ) {\n\t\toptions = arguments[ 1 ];\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( format( '0N32h', options ) );\n\t\t}\n\t\tif ( hasOwnProp( options, 'dtype' ) ) {\n\t\t\topts.dtype = options.dtype;\n\t\t} else {\n\t\t\topts.dtype = x.dtype;\n\t\t}\n\t\tif ( hasOwnProp( options, 'shape' ) ) {\n\t\t\topts.shape = options.shape;\n\t\t\tif ( typeof opts.shape === 'number' ) {\n\t\t\t\topts.shape = [ opts.shape ];\n\t\t\t}\n\t\t\tif ( !isNonNegativeIntegerArray( opts.shape ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer or an array of nonnegative integers. Option: `%s`.', 'shape', opts.shape ) );\n\t\t\t}\n\t\t} else {\n\t\t\topts.shape = x.shape;\n\t\t}\n\t\tif ( hasOwnProp( options, 'order' ) ) {\n\t\t\topts.order = options.order;\n\t\t} else {\n\t\t\topts.order = x.order;\n\t\t}\n\t} else {\n\t\topts.dtype = x.dtype;\n\t\topts.shape = x.shape;\n\t\topts.order = x.order;\n\t}\n\tndims = opts.shape.length;\n\tif ( ndims > 0 ) {\n\t\tlen = numel( opts.shape );\n\t\tif ( len < 0 ) {\n\t\t\tlen = 0; // note: we should only get here if an inferred shape is invalid (i.e., contains negative dimension sizes)\n\t\t}\n\t\tst = shape2strides( opts.shape, opts.order );\n\t} else {\n\t\t// For 0-dimensional arrays, the buffer should contain a single element...\n\t\tlen = 1;\n\t\tst = [ 0 ];\n\t}\n\tbuf = buffer( opts.dtype, len );\n\tif ( buf === null ) {\n\t\tthrow new TypeError( format( '0N35Z', opts.dtype ) );\n\t}\n\treturn new ndarray( opts.dtype, buf, opts.shape, st, strides2offset( opts.shape, st ), opts.order ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default zerosLike;\n"],"names":["zerosLike","x","options","opts","buf","len","st","isndarrayLike","TypeError","format","arguments","length","isPlainObject","hasOwnProp","dtype","shape","isNonNegativeIntegerArray","order","numel","shape2strides","buffer","ndarray","strides2offset"],"mappings":";;+5BAkEA,SAASA,EAAWC,GACnB,IAAIC,EAEAC,EACAC,EACAC,EACAC,EAEJ,IAAMC,EAAeN,GACpB,MAAM,IAAIO,UAAWC,EAAQ,QAASR,IAGvC,GADAE,EAAO,GACFO,UAAUC,OAAS,EAAI,CAE3B,IAAMC,EADNV,EAAUQ,UAAW,IAEpB,MAAM,IAAIF,UAAWC,EAAQ,QAASP,IAOvC,GALKW,EAAYX,EAAS,SACzBC,EAAKW,MAAQZ,EAAQY,MAErBX,EAAKW,MAAQb,EAAEa,MAEXD,EAAYX,EAAS,UAKzB,GAJAC,EAAKY,MAAQb,EAAQa,MACM,iBAAfZ,EAAKY,QAChBZ,EAAKY,MAAQ,CAAEZ,EAAKY,SAEfC,EAA2Bb,EAAKY,OACrC,MAAM,IAAIP,UAAWC,EAAQ,+GAAgH,QAASN,EAAKY,aAG5JZ,EAAKY,MAAQd,EAAEc,MAEXF,EAAYX,EAAS,SACzBC,EAAKc,MAAQf,EAAQe,MAErBd,EAAKc,MAAQhB,EAAEgB,WAGhBd,EAAKW,MAAQb,EAAEa,MACfX,EAAKY,MAAQd,EAAEc,MACfZ,EAAKc,MAAQhB,EAAEgB,MAehB,GAbQd,EAAKY,MAAMJ,OACN,IACZN,EAAMa,EAAOf,EAAKY,QACP,IACVV,EAAM,GAEPC,EAAKa,EAAehB,EAAKY,MAAOZ,EAAKc,SAGrCZ,EAAM,EACNC,EAAK,CAAE,IAGK,QADbF,EAAMgB,EAAQjB,EAAKW,MAAOT,IAEzB,MAAM,IAAIG,UAAWC,EAAQ,QAASN,EAAKW,QAE5C,OAAO,IAAIO,EAASlB,EAAKW,MAAOV,EAAKD,EAAKY,MAAOT,EAAIgB,EAAgBnB,EAAKY,MAAOT,GAAMH,EAAKc"}